package com.wangln.greendaotest.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.wangln.greendaotest.relation.manyToMany.Orders;
import com.wangln.greendaotest.relation.manyToMany.OrderWithProduct;
import com.wangln.greendaotest.relation.manyToMany.Products;
import com.wangln.greendaotest.relation.oneToMany.Friend;
import com.wangln.greendaotest.relation.oneToMany.People;
import com.wangln.greendaotest.relation.oneToOne.Person;
import com.wangln.greendaotest.relation.oneToOne.Product;
import com.wangln.greendaotest.simple.Test;
import com.wangln.greendaotest.simple.User;
import com.wangln.greendaotest.relation.oneToMany.People1;

import com.wangln.greendaotest.dao.OrdersDao;
import com.wangln.greendaotest.dao.OrderWithProductDao;
import com.wangln.greendaotest.dao.ProductsDao;
import com.wangln.greendaotest.dao.FriendDao;
import com.wangln.greendaotest.dao.PeopleDao;
import com.wangln.greendaotest.dao.PersonDao;
import com.wangln.greendaotest.dao.ProductDao;
import com.wangln.greendaotest.dao.TestDao;
import com.wangln.greendaotest.dao.UserDao;
import com.wangln.greendaotest.dao.People1Dao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig ordersDaoConfig;
    private final DaoConfig orderWithProductDaoConfig;
    private final DaoConfig productsDaoConfig;
    private final DaoConfig friendDaoConfig;
    private final DaoConfig peopleDaoConfig;
    private final DaoConfig personDaoConfig;
    private final DaoConfig productDaoConfig;
    private final DaoConfig testDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig people1DaoConfig;

    private final OrdersDao ordersDao;
    private final OrderWithProductDao orderWithProductDao;
    private final ProductsDao productsDao;
    private final FriendDao friendDao;
    private final PeopleDao peopleDao;
    private final PersonDao personDao;
    private final ProductDao productDao;
    private final TestDao testDao;
    private final UserDao userDao;
    private final People1Dao people1Dao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        ordersDaoConfig = daoConfigMap.get(OrdersDao.class).clone();
        ordersDaoConfig.initIdentityScope(type);

        orderWithProductDaoConfig = daoConfigMap.get(OrderWithProductDao.class).clone();
        orderWithProductDaoConfig.initIdentityScope(type);

        productsDaoConfig = daoConfigMap.get(ProductsDao.class).clone();
        productsDaoConfig.initIdentityScope(type);

        friendDaoConfig = daoConfigMap.get(FriendDao.class).clone();
        friendDaoConfig.initIdentityScope(type);

        peopleDaoConfig = daoConfigMap.get(PeopleDao.class).clone();
        peopleDaoConfig.initIdentityScope(type);

        personDaoConfig = daoConfigMap.get(PersonDao.class).clone();
        personDaoConfig.initIdentityScope(type);

        productDaoConfig = daoConfigMap.get(ProductDao.class).clone();
        productDaoConfig.initIdentityScope(type);

        testDaoConfig = daoConfigMap.get(TestDao.class).clone();
        testDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        people1DaoConfig = daoConfigMap.get(People1Dao.class).clone();
        people1DaoConfig.initIdentityScope(type);

        ordersDao = new OrdersDao(ordersDaoConfig, this);
        orderWithProductDao = new OrderWithProductDao(orderWithProductDaoConfig, this);
        productsDao = new ProductsDao(productsDaoConfig, this);
        friendDao = new FriendDao(friendDaoConfig, this);
        peopleDao = new PeopleDao(peopleDaoConfig, this);
        personDao = new PersonDao(personDaoConfig, this);
        productDao = new ProductDao(productDaoConfig, this);
        testDao = new TestDao(testDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        people1Dao = new People1Dao(people1DaoConfig, this);

        registerDao(Orders.class, ordersDao);
        registerDao(OrderWithProduct.class, orderWithProductDao);
        registerDao(Products.class, productsDao);
        registerDao(Friend.class, friendDao);
        registerDao(People.class, peopleDao);
        registerDao(Person.class, personDao);
        registerDao(Product.class, productDao);
        registerDao(Test.class, testDao);
        registerDao(User.class, userDao);
        registerDao(People1.class, people1Dao);
    }
    
    public void clear() {
        ordersDaoConfig.clearIdentityScope();
        orderWithProductDaoConfig.clearIdentityScope();
        productsDaoConfig.clearIdentityScope();
        friendDaoConfig.clearIdentityScope();
        peopleDaoConfig.clearIdentityScope();
        personDaoConfig.clearIdentityScope();
        productDaoConfig.clearIdentityScope();
        testDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        people1DaoConfig.clearIdentityScope();
    }

    public OrdersDao getOrdersDao() {
        return ordersDao;
    }

    public OrderWithProductDao getOrderWithProductDao() {
        return orderWithProductDao;
    }

    public ProductsDao getProductsDao() {
        return productsDao;
    }

    public FriendDao getFriendDao() {
        return friendDao;
    }

    public PeopleDao getPeopleDao() {
        return peopleDao;
    }

    public PersonDao getPersonDao() {
        return personDao;
    }

    public ProductDao getProductDao() {
        return productDao;
    }

    public TestDao getTestDao() {
        return testDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public People1Dao getPeople1Dao() {
        return people1Dao;
    }

}
